Süper fikir! 🎯 Ağaçtaki RFID etiketin UID’sini NFC ile okurken, aynı anda telefondan coğrafi konumu (WGS84) alıp veritabanına tek bir kayıt olarak yazmanız yeterli. Aşağıda hem doğru veri modeli hem de React Native/Expo (önerilir) tarafı için çalışır bir akış bıraktım.

1) Hangi formatta saklamalıyım?

Koordinat sistemi: WGS84 (telefonların verdiği standart).

Lat/Lon formatı: Ondalıklı derece (decimal degrees).

Örn: lat: 37.123456, lon: 33.654321

6 ondalık saklayın → ~11 cm duyarlılık (5 ondalık ≈ 1.1 m).

Zaman damgası: ISO-8601 UTC (2025-09-07T07:15:23Z)

Doğruluk: metre cinsinden (telefon SDK’sı verir).

Opsiyonel: yükseklik (altitude, m), hız, heading.

Örnek JSON
{
  "rfid_uid": "04A224FC3B2980",
  "tree_id": "TR-URF-000123",
  "lat": 37.123456,
  "lon": 33.654321,
  "alt": 487.3,
  "accuracy_m": 2.4,
  "collected_at_utc": "2025-09-07T07:15:23Z",
  "source": "mobile_gps",
  "notes": "Zeytin ağacı kuzey sınır",
  "user_id": "ahmetc"
}

2) Veritabanı şeması (PostgreSQL + PostGIS önerilir)

Neden? Mekânsal sorgular (ör. “çiftliğin poligonu içindeki tüm ağaçlar”), mesafe, yakınlık vb. çok kolaylaşır.

-- PostGIS yüklü olmalı: CREATE EXTENSION postgis;
CREATE TABLE trees (
  id SERIAL PRIMARY KEY,
  rfid_uid VARCHAR(32) UNIQUE NOT NULL,
  tree_code VARCHAR(64),                -- sizin iç kodunuz (opsiyonel)
  geom GEOGRAPHY(POINT, 4326) NOT NULL, -- WGS84, lat/lon
  lat NUMERIC(9,6) GENERATED ALWAYS AS (ST_Y(geom::geometry)) STORED,
  lon NUMERIC(9,6) GENERATED ALWAYS AS (ST_X(geom::geometry)) STORED,
  altitude_m NUMERIC(7,2),
  accuracy_m NUMERIC(7,2),
  collected_at_utc TIMESTAMPTZ NOT NULL DEFAULT now(),
  source TEXT DEFAULT 'mobile_gps',
  notes TEXT,
  created_by TEXT
);

-- Hızlı mekânsal sorgu için indeks
CREATE INDEX idx_trees_geom ON trees USING GIST(geom);
CREATE UNIQUE INDEX idx_trees_rfid ON trees (rfid_uid);


PostGIS kullanmayacaksanız, en azından lat NUMERIC(9,6), lon NUMERIC(9,6), accuracy_m, collected_at_utc alanları olsun.

3) Mobil tarafta konum alma (Expo önerisi)

Expo kullanıyorsanız expo-location ile tek satırda iş:

expo install expo-location

// Konum + NFC entegrasyon örneği (TypeScript, Expo)
import * as Location from 'expo-location';
import { useState, useCallback } from 'react';
import { Alert } from 'react-native';

type GpsFix = {
  lat: number;
  lon: number;
  alt?: number | null;
  accuracy_m?: number | null;
  timestamp: string; // ISO-8601 UTC
};

async function getGpsFix(): Promise<GpsFix> {
  const { status } = await Location.requestForegroundPermissionsAsync();
  if (status !== 'granted') {
    throw new Error('Konum izni verilmedi.');
  }

  // Yüksek doğruluk ve taze konum
  const pos = await Location.getCurrentPositionAsync({
    accuracy: Location.Accuracy.Highest,
    mayShowUserSettingsDialog: true,
  });

  const lat = Number(pos.coords.latitude.toFixed(6));
  const lon = Number(pos.coords.longitude.toFixed(6));

  return {
    lat,
    lon,
    alt: pos.coords.altitude ?? null,
    accuracy_m: pos.coords.accuracy ?? null,
    timestamp: new Date(pos.timestamp).toISOString(),
  };
}

// NFC hook’unuzdan okunan uid ile birlikte kaydetme akışı
export async function captureTreePointAndSave(readRfidUid: () => Promise<string>) {
  try {
    const uid = await readRfidUid();           // Örn: useNfcReader() içinde NDEF/ISO dep.
    const fix = await getGpsFix();

    // Basit aralık doğrulaması
    if (fix.lat < -90 || fix.lat > 90 || fix.lon < -180 || fix.lon > 180) {
      throw new Error('Geçersiz koordinat aralığı.');
    }

    const payload = {
      rfid_uid: uid,
      lat: fix.lat,
      lon: fix.lon,
      alt: fix.alt,
      accuracy_m: fix.accuracy_m,
      collected_at_utc: fix.timestamp,
      source: 'mobile_gps',
    };

    // Sunucuya yolla (örnek)
    await fetch('https://api.sizin-domain.com/trees', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    Alert.alert('Başarılı', `Ağaç kaydedildi\nUID: ${uid}\n${fix.lat}, ${fix.lon}`);
  } catch (e: any) {
    Alert.alert('Hata', e.message ?? 'Bilinmeyen hata');
  }
}

Android/iOS izinleri

Android (Expo yönetimli): app.json/app.config.ts içinde android.permissions genelde otomatik; gerekirse ACCESS_FINE_LOCATION.

iOS: NSLocationWhenInUseUsageDescription açıklama metni ekleyin.

4) NFC + konum tek tuş akışı (UX önerisi)

“Ağacı Tara” → NFC okuma başlar.

UID okununca otomatik konum alınır (spinner göster).

Doğruluk > 10 m ise kullanıcıya “Konum zayıf, tekrar dene” uyarısı (isteğe bağlı eşik: 5–10 m).

Kaydı POST et ve başarı mesajı göster.

Offline mod: Sunucu yoksa, payload’ları AsyncStorage kuyruğuna yaz; internet gelince senkronize et.

5) Alternatif depolama formatları (gerekirse)

GeoJSON (harici paylaşım/harita için şahane):

{
  "type": "Feature",
  "geometry": { "type": "Point", "coordinates": [33.654321, 37.123456] },
  "properties": { "rfid_uid": "04A224FC3B2980", "accuracy_m": 2.4, "collected_at_utc": "2025-09-07T07:15:23Z" }
}


WKT (PostGIS ile uyumlu): POINT(33.654321 37.123456)

6) Doğruluk ve kalite ipuçları

6 ondalık saklayın (≈ 0.11 m).

Ağaç sabit nesne olduğu için tek seferlik iyi koşullarda (açık gökyüzü) kayıt almanız yeterli.

Konum 2–5 m doğruluk altında değilse yeniden ölçüm alın veya ortalama alın (2–3 ölçüm).

Ağaçları haritada göstermek için sonradan tile server/Google Maps/Leaflet kullanabilirsiniz (PostGIS’ten GeoJSON çıkarıp).

7) Sunucu tarafında ek güvenlik/iş mantığı

rfid_uid UNIQUE olsun (aynı etiketi iki ağaca bağlamasın).

accuracy_m > 50 gibi çok zayıf ölçümleri reddedin.

API girişinde lat/lon aralığı kontrol edin.

Kullanıcı/rol bazlı yetki (kim ekledi/güncelledi).