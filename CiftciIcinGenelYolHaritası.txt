🌱 Projenin Basit Yol Haritası (Adım Adım)
1) Çiftçi kaydı (ilk giriş)

Çiftçi uygulamaya girer, “Kayıt Ol” butonuna basar.

Telefon, çiftçinin bilgilerini (isim, tarla, iletişim vb.) bir dosya (JSON) haline getirir.

Bu dosya IPFS’e yüklenir → bir özel kimlik numarası (CID) oluşur.

Bu CID, çiftçinin cüzdanıyla imzalanıp blockchain’e (Sepolia) kaydedilir.

Blockchain’de: “Bu adres = bu CID (çiftçinin bilgisi)” diye kayıt tutulur.

2) Ürün kaydı (ağaç/domates tarlası)

Her ağaca veya tarlaya bir RFID etiketi (ve yanında kolaylık için QR kod) takılır.

Telefon bu etiketi/QR’yi okur.

Çiftçi ürünün bilgilerini girer (ör. “Domates, 1 dönüm, ekim tarihi…”).

Telefon yine bir JSON dosyası yapar ve IPFS’e yükler → yeni bir CID çıkar.

Bu CID ve RFID birlikte blockchain’e kaydedilir.

Blockchain’de: “Bu RFID = bu CID (ürün bilgisi)” diye kayıt olur.

3) Bilgi okuma (detay veya geçmişi görmek)

Biri o ağacı/domatesi görmek ister.

Telefon önce blockchain’den RFID’ye bağlı CID’yi bulur.

Sonra IPFS’ten bu CID dosyasını indirir → ekranda ürün bilgisi görünür.

Eğer Elif’in yaptığı geçmiş servisi varsa, eski kayıtlar ve analizler de listelenir.

4) Kiralama veya satın alma

Kullanıcı “Bu ürünü kirala/sahiplen” der.

İki yol var:

Kripto ile ödeme: Kullanıcı cüzdanıyla blockchain’e imza atar → sözleşmede event (kayıt) oluşur.

Kartla ödeme: Normal banka/kredi kartıyla ödeme yapılır.

Bu ödeme blockchain dışındadır.

Ama ödeme bitince sistem, blockchain’e “Bu ürün kiralandı” diye bir kanıt (event) yazar.

Böylece blockchain’de herkes görebilir: “Bu RFID = şu kişi tarafından kiralandı.”

5) Cüzdanın rolü

Her kayıt, her kiralama blockchain’e yazılır → yazarken cüzdan imzası gerekir.

Cüzdan → (MetaMask / WalletConnect) ile bağlanır, “imzala” der.

Okuma için cüzdan gerekmez; sadece yazarken lazım.

6) Yapay zeka ve uydu verileri

Elif’in yapay zekası mesela “bu domates tarlasında hastalık var mı?” diye analiz yapar.

Sonucu bir dosya (JSON veya resim) olarak çıkarır.

Bu dosya yine IPFS’e yüklenir → CID alınır.

Bu CID, ürünün kaydına eklenir.

Sonra kullanıcı ürünü açtığında analiz sonuçlarını da görebilir.

🎯 Basit Özet

IPFS = Dosya dolabı (dosyaları koyarız, CID alırız).

CID = Dosyanın parmak izi (dosya değişirse CID de değişir).

Blockchain (Sepolia) = Defter (sadece CID ve kim kaydetti bilgisini tutar).

Cüzdan = İmza kalemi (yeni kayıt yazarken imza atar).

Kart = Normal ödeme (blockchain’e kanıt yazmak için arka planda sistem ekler).

Event = Günlük defteri satırı (herkes görebilir, silinemez).

İşte bu şekilde adım adım düşündüğünde sistemin akışı çok basit:
📍 Kaydet → CID → Blockchain’e yaz → Sonra herkese göster./

═══════════════════════════════════════════════════════════════════════════════
🧭 ÇİFTÇİ UYGULAMASI – DETAYLI YOL HARİTASI (ADIM ADIM UYGULAMA PLANI)
═══════════════════════════════════════════════════════════════════════════════

🎯 Amaç: Çiftçinin mobil uygulama ile kayıt olması, ağaç/ürün eklemesi (NFC + GPS), veriyi IPFS’e yüklemesi, CID’i blokzincire yazması ve sonrasında doğrulama/okuma/kiralama akışlarının uçtan uca çalışması.

───────────────────────────────────────────────────────────────────────────────
1) ÇİFTÇİ KAYDI (Wallet + IPFS + Kontrat)
───────────────────────────────────────────────────────────────────────────────
Girdi:
- Çiftçi temel bilgileri (ad-soyad, iletişim, bahçe adı/konumu vb.)
- Mobil cihaz (MetaMask/WalletConnect ile cüzdan)

Adımlar:
- Uygulama: Çiftçi formu → JSON oluştur
- IPFS: JSON’u yükle → CID al
- Cüzdan: CID’i imzalayarak `registerFarmer(address, cid)` çağır
- Kontrat: Farmer kayıt event’i emit et

Çıktı:
- CID (çiftçi profili)
- Blockchain’de farmerAddress → CID eşleşmesi

UI/UX:
- “Kayıt Ol” ekranı, zorunlu alanlar, başarı/hata modalları
- CID gösterimi ve “Kopyala” butonu

Test Kriterleri:
- CID oluşuyor ve gateway’den okunuyor
- Kontrat event’i loglanıyor

───────────────────────────────────────────────────────────────────────────────
2) AĞAÇ/ÜRÜN EKLEME (NFC + GPS → IPFS → Kontrat)
───────────────────────────────────────────────────────────────────────────────
Girdi:
- NFC’den RFID UID, GPS’ten lat/lon/accuracy, form verileri (adı, türü, sağlık, bahçe vs.)

Adımlar:
- Uygulama: “NFC + Konum Oku” → UID ve GPS alanlarını otomatik doldur
- Uygulama: Form → `TreeDataPackage` JSON oluştur (TR-UID; WGS84; ISO-8601)
- IPFS: JSON’u yükle → CID al
- Cüzdan: `registerTree(rfid, cid)` çağır (WalletConnect/MetaMask)
- Kontrat: TreeRegistered(rfid, cid, owner) event’i emit et

Çıktı:
- CID (ağaç/ürün kaydı)
- Blockchain’de RFID → CID eşleşmesi

UI/UX:
- RFID ve konum alanları sadece-okunur
- “Ağacı Kaydet” butonu, upload ilerleme çubuğu, CID gösterimi

Offline Desteği:
- İnternet yoksa JSON’u AsyncStorage kuyruğuna ekle
- Bağlantı gelince otomatik yükle ve kontrata yaz

Test Kriterleri:
- CID üretiliyor ve kontrata yazılıyor
- GPS accuracy uyarıları (örn. >10m)

───────────────────────────────────────────────────────────────────────────────
3) KAYIT OKUMA/DOĞRULAMA (RFID → CID → IPFS)
───────────────────────────────────────────────────────────────────────────────
Girdi:
- RFID UID (NFC veya QR)

Adımlar:
- Kontrat: `getByRfid(rfid)` ile CID al
- IPFS: CID’den JSON’u indir
- Uygulama: Ekranda detayları göster (konum, zaman, çiftçi/bahçe bilgisi)

UI/UX:
- “Doğrula” ekranı, CID ve IPFS linki
- Harita bileşeni (enlem/boylam noktası)

Test Kriterleri:
- Yanlış/olmayan RFID’de anlamlı uyarı
- Ağ yoksa retry ve offline mesajı

───────────────────────────────────────────────────────────────────────────────
4) KİRALAMA / SAHİPLENME (Opsiyonel Akış)
───────────────────────────────────────────────────────────────────────────────
Girdi:
- Seçilen ürün/ağaç, ödeme yöntemi (kripto/kart)

Adımlar:
- Kripto: Cüzdanla `rentTree(rfid, duration, price)` imzala → event
- Kart: Ödeme sağlayıcı → başarıdan sonra kontrata kanıt yaz

UI/UX:
- “Kirala” butonu, onay modali, işlem takibi

Test Kriterleri:
- Event’ler doğru parametrelerle düşüyor

───────────────────────────────────────────────────────────────────────────────
5) GEÇMİŞ VE ANALİZ (Uydu/AI Entegrasyonları)
───────────────────────────────────────────────────────────────────────────────
Girdi:
- Koordinatlar, tarih aralığı

Adımlar:
- Sentinel-2 / GEE: NDVI vb. metrikleri çek
- Sonucu JSON/asset olarak IPFS’e yükle → CID’yi ağaca ekle (append pattern)

UI/UX:
- “Geçmiş” ekranı: zaman çizelgesi, NDVI grafikleri, görüntüler

Test Kriterleri:
- Büyük dosyalarda gateway performansı ve cache

───────────────────────────────────────────────────────────────────────────────
6) GÜVENLİK VE BÜTÜNLÜK (Opsiyonel, Hafta 3)
───────────────────────────────────────────────────────────────────────────────
Adımlar:
- Mobilde JSON hash (SHA-256) üret ve cüzdanla imzala
- İmzayı JSON’a ekle; kontrata hash yaz

Test Kriterleri:
- JSON değişince doğrulama başarısız olmalı

───────────────────────────────────────────────────────────────────────────────
7) OPERASYONEL KONULAR (Sürümleme, İzleme, Maliyet)
───────────────────────────────────────────────────────────────────────────────
- Sürüm: JSON `schema_version`, backward compatibility
- İzleme: Sentry/Crashlytics, Pinata rate-limit uyarıları
- Maliyet: Pinata ücretsiz katman sınırları, arşiv politikası

═══════════════════════════════════════════════════════════════════════════════
📁 TEKNİK DOSYA/YAPI ÖNERİSİ
═══════════════════════════════════════════════════════════════════════════════

app/
  services/
    locationService.ts         # GPS (mevcut)
    nfcService.ts              # NFC okuma (mevcut)
    pinataService.ts           # IPFS (pinJSONToIPFS, get, search, offline queue)
    blockchainService.ts       # Provider, kontrat, çağrılar
    walletService.ts           # WalletConnect/MetaMask
  hooks/
    useNfcReader.ts            # NFC + konum orkestrasyonu (mevcut)
    useTreeUpload.ts           # IPFS upload, kuyruğu işleme
    useBlockchain.ts           # registerTree, event dinleme
  farmer/
    trees/add.tsx              # NFC+GPS → IPFS → registerTree akışı
    trees/[id]/edit.tsx        # Düzenleme/ek veri ekleme
  screens/
    verify.tsx                 # RFID → CID → IPFS doğrulama

═══════════════════════════════════════════════════════════════════════════════
✅ KABUL KRİTERLERİ (UÇTAN UCA)
═══════════════════════════════════════════════════════════════════════════════
- NFC ile UID okunur; GPS doğruluk ≤ 10 m değilse uyarı verilir
- “Ağacı Kaydet” → IPFS CID alınır → kontrata `registerTree` yazılır
- “Doğrula” ekranı RFID’den CID’i bulur ve JSON’u gösterir
- Offline iken yapılan kayıtlar, çevrimiçi olunca otomatik yüklenir

═══════════════════════════════════════════════════════════════════════════════
🚀 SONRAKİ ADIM (ŞİMDİ):
═══════════════════════════════════════════════════════════════════════════════
1) IPFS servis dosyasını (pinataService.ts) yeniden oluştur (silindiyse)
2) useTreeUpload.ts hook’unu yeniden ekle (silindiyse)
3) BlockchainService + WalletService + useBlockchain ekle
4) `registerTree(rfid, cid)` akışını “Ağacı Kaydet” sonrası tetikle
5) “Doğrula” ekranını ekleyip RFID→CID→IPFS okumasını göster

Not: API anahtarlarını kod içinde değil .env’de tutmayı tercih edin; dev/test için geçici kullanım yapılabilir.

═══════════════════════════════════════════════════════════════════════════════